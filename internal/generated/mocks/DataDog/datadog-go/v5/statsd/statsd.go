// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/DataDog/datadog-go/v5/statsd (interfaces: ClientInterface)
//
// Generated by this command:
//
//	mockgen -destination=internal/generated/mocks/DataDog/datadog-go/v5/statsd/statsd.go github.com/DataDog/datadog-go/v5/statsd ClientInterface
//
// Package mock_statsd is a generated GoMock package.
package mock_statsd

import (
	reflect "reflect"
	time "time"

	statsd "github.com/DataDog/datadog-go/v5/statsd"
	gomock "go.uber.org/mock/gomock"
)

// MockClientInterface is a mock of ClientInterface interface.
type MockClientInterface struct {
	ctrl     *gomock.Controller
	recorder *MockClientInterfaceMockRecorder
}

// MockClientInterfaceMockRecorder is the mock recorder for MockClientInterface.
type MockClientInterfaceMockRecorder struct {
	mock *MockClientInterface
}

// NewMockClientInterface creates a new mock instance.
func NewMockClientInterface(ctrl *gomock.Controller) *MockClientInterface {
	mock := &MockClientInterface{ctrl: ctrl}
	mock.recorder = &MockClientInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClientInterface) EXPECT() *MockClientInterfaceMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockClientInterface) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockClientInterfaceMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientInterface)(nil).Close))
}

// Count mocks base method.
func (m *MockClientInterface) Count(arg0 string, arg1 int64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Count", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Count indicates an expected call of Count.
func (mr *MockClientInterfaceMockRecorder) Count(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Count", reflect.TypeOf((*MockClientInterface)(nil).Count), arg0, arg1, arg2, arg3)
}

// CountWithTimestamp mocks base method.
func (m *MockClientInterface) CountWithTimestamp(arg0 string, arg1 int64, arg2 []string, arg3 float64, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CountWithTimestamp", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// CountWithTimestamp indicates an expected call of CountWithTimestamp.
func (mr *MockClientInterfaceMockRecorder) CountWithTimestamp(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CountWithTimestamp", reflect.TypeOf((*MockClientInterface)(nil).CountWithTimestamp), arg0, arg1, arg2, arg3, arg4)
}

// Decr mocks base method.
func (m *MockClientInterface) Decr(arg0 string, arg1 []string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decr", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decr indicates an expected call of Decr.
func (mr *MockClientInterfaceMockRecorder) Decr(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decr", reflect.TypeOf((*MockClientInterface)(nil).Decr), arg0, arg1, arg2)
}

// Distribution mocks base method.
func (m *MockClientInterface) Distribution(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Distribution", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Distribution indicates an expected call of Distribution.
func (mr *MockClientInterfaceMockRecorder) Distribution(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Distribution", reflect.TypeOf((*MockClientInterface)(nil).Distribution), arg0, arg1, arg2, arg3)
}

// Event mocks base method.
func (m *MockClientInterface) Event(arg0 *statsd.Event) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Event", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Event indicates an expected call of Event.
func (mr *MockClientInterfaceMockRecorder) Event(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Event", reflect.TypeOf((*MockClientInterface)(nil).Event), arg0)
}

// Flush mocks base method.
func (m *MockClientInterface) Flush() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Flush")
	ret0, _ := ret[0].(error)
	return ret0
}

// Flush indicates an expected call of Flush.
func (mr *MockClientInterfaceMockRecorder) Flush() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Flush", reflect.TypeOf((*MockClientInterface)(nil).Flush))
}

// Gauge mocks base method.
func (m *MockClientInterface) Gauge(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gauge", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Gauge indicates an expected call of Gauge.
func (mr *MockClientInterfaceMockRecorder) Gauge(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gauge", reflect.TypeOf((*MockClientInterface)(nil).Gauge), arg0, arg1, arg2, arg3)
}

// GaugeWithTimestamp mocks base method.
func (m *MockClientInterface) GaugeWithTimestamp(arg0 string, arg1 float64, arg2 []string, arg3 float64, arg4 time.Time) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GaugeWithTimestamp", arg0, arg1, arg2, arg3, arg4)
	ret0, _ := ret[0].(error)
	return ret0
}

// GaugeWithTimestamp indicates an expected call of GaugeWithTimestamp.
func (mr *MockClientInterfaceMockRecorder) GaugeWithTimestamp(arg0, arg1, arg2, arg3, arg4 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GaugeWithTimestamp", reflect.TypeOf((*MockClientInterface)(nil).GaugeWithTimestamp), arg0, arg1, arg2, arg3, arg4)
}

// GetTelemetry mocks base method.
func (m *MockClientInterface) GetTelemetry() statsd.Telemetry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTelemetry")
	ret0, _ := ret[0].(statsd.Telemetry)
	return ret0
}

// GetTelemetry indicates an expected call of GetTelemetry.
func (mr *MockClientInterfaceMockRecorder) GetTelemetry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTelemetry", reflect.TypeOf((*MockClientInterface)(nil).GetTelemetry))
}

// Histogram mocks base method.
func (m *MockClientInterface) Histogram(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Histogram", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Histogram indicates an expected call of Histogram.
func (mr *MockClientInterfaceMockRecorder) Histogram(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Histogram", reflect.TypeOf((*MockClientInterface)(nil).Histogram), arg0, arg1, arg2, arg3)
}

// Incr mocks base method.
func (m *MockClientInterface) Incr(arg0 string, arg1 []string, arg2 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Incr", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Incr indicates an expected call of Incr.
func (mr *MockClientInterfaceMockRecorder) Incr(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Incr", reflect.TypeOf((*MockClientInterface)(nil).Incr), arg0, arg1, arg2)
}

// IsClosed mocks base method.
func (m *MockClientInterface) IsClosed() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsClosed")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsClosed indicates an expected call of IsClosed.
func (mr *MockClientInterfaceMockRecorder) IsClosed() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsClosed", reflect.TypeOf((*MockClientInterface)(nil).IsClosed))
}

// ServiceCheck mocks base method.
func (m *MockClientInterface) ServiceCheck(arg0 *statsd.ServiceCheck) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceCheck", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServiceCheck indicates an expected call of ServiceCheck.
func (mr *MockClientInterfaceMockRecorder) ServiceCheck(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceCheck", reflect.TypeOf((*MockClientInterface)(nil).ServiceCheck), arg0)
}

// Set mocks base method.
func (m *MockClientInterface) Set(arg0, arg1 string, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockClientInterfaceMockRecorder) Set(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockClientInterface)(nil).Set), arg0, arg1, arg2, arg3)
}

// SimpleEvent mocks base method.
func (m *MockClientInterface) SimpleEvent(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimpleEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleEvent indicates an expected call of SimpleEvent.
func (mr *MockClientInterfaceMockRecorder) SimpleEvent(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleEvent", reflect.TypeOf((*MockClientInterface)(nil).SimpleEvent), arg0, arg1)
}

// SimpleServiceCheck mocks base method.
func (m *MockClientInterface) SimpleServiceCheck(arg0 string, arg1 statsd.ServiceCheckStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SimpleServiceCheck", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SimpleServiceCheck indicates an expected call of SimpleServiceCheck.
func (mr *MockClientInterfaceMockRecorder) SimpleServiceCheck(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SimpleServiceCheck", reflect.TypeOf((*MockClientInterface)(nil).SimpleServiceCheck), arg0, arg1)
}

// TimeInMilliseconds mocks base method.
func (m *MockClientInterface) TimeInMilliseconds(arg0 string, arg1 float64, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TimeInMilliseconds", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// TimeInMilliseconds indicates an expected call of TimeInMilliseconds.
func (mr *MockClientInterfaceMockRecorder) TimeInMilliseconds(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TimeInMilliseconds", reflect.TypeOf((*MockClientInterface)(nil).TimeInMilliseconds), arg0, arg1, arg2, arg3)
}

// Timing mocks base method.
func (m *MockClientInterface) Timing(arg0 string, arg1 time.Duration, arg2 []string, arg3 float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Timing", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// Timing indicates an expected call of Timing.
func (mr *MockClientInterfaceMockRecorder) Timing(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Timing", reflect.TypeOf((*MockClientInterface)(nil).Timing), arg0, arg1, arg2, arg3)
}
